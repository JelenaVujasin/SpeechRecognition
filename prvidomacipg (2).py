# -*- coding: utf-8 -*-
"""PrviDomaciPG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B4accqMTs16ByRIwmgMIDW2Hc2isEYYd
"""

import numpy as np
import scipy.io.wavfile as wav
import matplotlib.pyplot as plt
import librosa
import librosa.display

# Učitavanje audio fajla
file_path = '/content/e1420f03-78a9-4ddc-9a12-8d2c47667948.wav'
audio_data, sample_rate = librosa.load(file_path)
audio_data = audio_data / np.max(np.abs(audio_data))

# 1. Analiza u vremenskom domenu
# 1.1. Prikaz talasnog oblika
plt.figure(figsize=(12, 4))
plt.title('Talasni oblik audio fajla')
plt.plot(audio_data)
plt.xlabel('Vreme (uzorci)')
plt.ylabel('Amplituda')
plt.show()

# 1.2. Analiza amplitude
frame_size = 256
rms_values = []
#audio_data1 = audio_data.astype(np.float32) / np.iinfo(np.int16).max
for i in range(0, len(audio_data) - frame_size, frame_size):
    frame = audio_data[i:i + frame_size]
    rms = np.sqrt(np.mean(np.square(frame)))
    rms_values.append(rms)

plt.figure(figsize=(12, 4))
plt.title('RMS grafik')
plt.plot(rms_values)
plt.xlabel('Okviri')
plt.ylabel('RMS vrednost')
plt.show()

average_amplitude = np.mean(np.abs(audio_data))
print('Prosečna amplituda:', average_amplitude)

# Pronalaženje indeksa najviše i najniže tačke na talasnom obliku
indeks_najvece_tacke = np.argmax(audio_data)
indeks_najmanje_tacke = np.argmin(audio_data)

# Vrednosti najviše i najniže tačke
najveca_tacka = audio_data[indeks_najvece_tacke]
najmanja_tacka = audio_data[indeks_najmanje_tacke]

# Označavanje najviše tačke crvenom tačkom na grafiku
plt.figure(figsize=(12, 4))
plt.title('Talasni oblik sa označenim najvišom i najnižom tačkom')
plt.plot(audio_data)
plt.scatter(indeks_najvece_tacke, najveca_tacka, color='r', label='Najviša tačka')
plt.scatter(indeks_najmanje_tacke, najmanja_tacka, color='g', label='Najniža tačka')
plt.xlabel('Vreme (uzorci)')
plt.ylabel('Amplituda')
plt.legend()
plt.show()

# Ispis vrednosti najviše i najniže tačke
print('Najviša tačka: Vreme -', indeks_najvece_tacke, 'Amplituda -', najveca_tacka)
print('Najniža tačka: Vreme -', indeks_najmanje_tacke, 'Amplituda -', najmanja_tacka)

# Prag za određivanje početka i kraja zvuka
threshold = 0.025

print(rms_values)

# Prilagodite vrednost praga prema potrebama vašeg audio signala

# Pronalaženje indeksa gde RMS vrednost prelazi prag za početak zvuka
pocetak_zvuka_indeks = np.argmax(np.array(rms_values) > threshold)
print(pocetak_zvuka_indeks)

# Pronalaženje indeksa gde RMS vrednost ponovo padne ispod praga za kraj zvuka
kraj_zvuka_indeks = pocetak_zvuka_indeks + np.argmax(np.array(rms_values[pocetak_zvuka_indeks:]) < threshold)
print(kraj_zvuka_indeks)

# Prikaz talasnog oblika sa označenim početkom i krajem zvuka
plt.figure(figsize=(12, 4))
plt.title('Talasni oblik sa označenim početkom i krajem zvuka')
plt.plot(audio_data)
plt.axvline(x=pocetak_zvuka_indeks * frame_size, color='r', linestyle='--', label='Početak zvuka')
plt.axvline(x=kraj_zvuka_indeks * frame_size, color='g', linestyle='--', label='Kraj zvuka')
plt.xlabel('Vreme (uzorci)')
plt.ylabel('Amplituda')
plt.legend()
plt.show()

# 1.4. Stopa prelaska preko nule
frame_size = 256
zero_crossing_rate = librosa.feature.zero_crossing_rate(audio_data, frame_length=frame_size, hop_length=frame_size)[0]

# Prikazivanje rezultata na grafiku
plt.figure(figsize=(12, 4))
plt.plot(zero_crossing_rate, color='b', label='Stopa prelaska preko nule')
plt.xlabel('Vreme (okviri)')
plt.ylabel('Stopa prelaska preko nule')
plt.title('Stopa prelaska preko nule za uneti fajl')
plt.legend()
plt.show()

# 2. Analiza u frekvencijskom domenu
# 2.1. Prikaz spektrograma
#audio_data1 = audio_data.astype(np.float32) / np.iinfo(np.int16).max
plt.figure(figsize=(12, 4))
D = librosa.amplitude_to_db(np.abs(librosa.stft(audio_data)), ref=np.max)
librosa.display.specshow(D, sr=sample_rate, x_axis='time', y_axis='log')
plt.colorbar(format='%+2.0f dB')
plt.title('Spektrogram')
plt.show()

# 2.2. Pronalaženje osnovne frekvencije
# Funkcija za pronalaženje osnovne frekvencije korišćenjem automatske korelacije
dft_spectrum = np.abs(np.fft.fft(audio_data))
frequencies = np.fft.fftfreq(len(dft_spectrum), 1/sample_rate)  # Frekvencijske vrednosti u Hz

# Pronađite indeks maksimalne vrednosti u DFT spektru
fundamental_frequency_index = np.argmax(dft_spectrum[1:]) + 1

# Konvertujte indeks u frekvenciju u Hz
fundamental_frequency = frequencies[fundamental_frequency_index]
print('Osnovna frekvencija:', fundamental_frequency, 'Hz')

# Prikaz spektrograma sa označenom osnovnom frekvencijom
plt.figure(figsize=(12, 4))
librosa.display.specshow(D, sr=sample_rate, x_axis='time', y_axis='log')
plt.colorbar(format='%+2.0f dB')
plt.title('Spektrogram sa označenom osnovnom frekvencijom')
plt.axhline(y=fundamental_frequency, color='r', linestyle='--', linewidth=1, label='Osnovna frekvencija')
plt.legend()
plt.show()